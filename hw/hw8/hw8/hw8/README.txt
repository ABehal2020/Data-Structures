HOMEWORK 8: B+ TREES


NAME:  < Aditya Behal >


COLLABORATORS AND OTHER RESOURCES:
List the names of everyone you talked to about this assignment
(classmates, TAs, ALAC tutors, upperclassmen, students/instructor via
LMS, etc.), and all of the resources (books, online reference
material, etc.) you consulted in completing this assignment.

< Ali Lin, Marc Rajesh, Shreyas Seethalla >

Remember: Your implementation for this assignment must be done on your
own, as described in "Academic Integrity for Homework" handout.


ESTIMATE OF # OF HOURS SPENT ON THIS ASSIGNMENT:  < 20 hours >


TESTING & DEBUGGING STRATEGY: 
Discuss your strategy for testing & debugging your program.  
What tools did you use (gdb/lldb/Visual Studio debugger,
Valgrind/Dr. Memory, std::cout & print, etc.)?  How did you test the
"corner cases" of your implementation?

I used lldb and Xcode debugger along with print_sideways and print_BFS functions to visualize my B+ tree.
I used the watch stack, put break points, added expressions to the watch stack, used cout extensively, and used the print functions I wrote to see the tree in live time during its construction.
For greater control over the debugging, I used the step into and step out of and step to next line features in the Xcode debugger extensively as well.
I used Dr. Memory and g++ with -Wall and -Wextra and -g flags enabled to resolve both compile time errors and warnings and memory errors as I iteratively wrote and tested chunks of my code.
In order to test the corner cases well, I used the visual interactive website provided in the HW handout and drew lots of abstract tables of B+ trees in my notebook.
I drew all changes to the B+ tree including the intermediate steps (e.g. when a value was added causing the leaf node to split and then the node above it to split, etc.).
I monitored my B+ tree generated by my program continuously with lldb to ensure that each intermediate change was done correctly.
I also checked to make sure that my parent and children pointers of each node was correct at all times when inserting and splitting nodes.

I also implemented the extra credit (print_bfs_pretty). Here is the sample output for the provided extra credit test case in the main.cpp:

					32
			16				40
	7		23,25		37		43
1	7,10	16	23	25,28	32	37,39	40	43,45

We can see that 16 and 40 are children of 32. 7 and 23,25 are children of 16. 37 and 43 are children of 40.
1 and 7,10 are children of 7. 16 and 23 and 25,28 are children of 23,25. 32 and 37,39 are children of 37. 40 and 43,45 are children of 43.


MISC. COMMENTS TO GRADER:  
(optional, please be concise!)

